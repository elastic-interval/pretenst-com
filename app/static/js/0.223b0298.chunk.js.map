{"version":3,"sources":["../../eig/pkg/eig.js"],"names":["cachedTextDecoder","TextDecoder","ignoreBOM","fatal","decode","cachegetUint8Memory0","getStringFromWasm0","ptr","len","buffer","Uint8Array","subarray","cachegetFloat32Memory0","getFloat32Memory0","Float32Array","WASM_VECTOR_LEN","passArrayF32ToWasm0","arg","malloc","length","set","_assertClass","instance","klass","Error","concat","name","default_world_feature","fabric_feature","Stage","Object","freeze","Growing","Shaping","Slack","Pretensing","Pretenst","SurfaceCharacter","Frozen","Sticky","Bouncy","WorldFeature","Gravity","Antigravity","ShapingDrag","Drag","ShapingPretenstFactor","PretenstFactor","IterationsPerFrame","IntervalCountdown","PretensingCountdown","PushOverPull","VisualStrain","Fabric","this","key","value","ret","__wrap","x","y","z","alpha_index","omega_index","push","ideal_length","rest_length","stiffness","linear_density","countdown","index","joint0","joint1","joint2","face_index","attack_countdown","decay_countdown","delta_size_nuance","altitude","factor","m","ptr0","len0","new_stiffnesses","new_linear_densities","ptr1","len1","world","World","requested_stage","undefined","get","arg0","obj","create","prototype","joint_count","View","fabric","joint_locations","joint_velocities","line_locations","line_colors","face_midpoints","face_normals","face_vertex_locations","unit_vectors","ideal_lengths","strains","strain_limits","strain_nuances","stiffnesses","linear_densities","surface_character","push_and_pull","feature","percent","__wbindgen_throw","arg1"],"mappings":"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","file":"static/js/0.223b0298.chunk.js","sourcesContent":["import _classCallCheck from \"/Users/fluxe/pretenst/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/fluxe/pretenst/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport * as wasm from './eig_bg.wasm';\nvar cachedTextDecoder = new TextDecoder('utf-8', {\n  ignoreBOM: true,\n  fatal: true\n});\ncachedTextDecoder.decode();\nvar cachegetUint8Memory0 = null;\n\nfunction getUint8Memory0() {\n  if (cachegetUint8Memory0 === null || cachegetUint8Memory0.buffer !== wasm.memory.buffer) {\n    cachegetUint8Memory0 = new Uint8Array(wasm.memory.buffer);\n  }\n\n  return cachegetUint8Memory0;\n}\n\nfunction getStringFromWasm0(ptr, len) {\n  return cachedTextDecoder.decode(getUint8Memory0().subarray(ptr, ptr + len));\n}\n\nvar cachegetFloat32Memory0 = null;\n\nfunction getFloat32Memory0() {\n  if (cachegetFloat32Memory0 === null || cachegetFloat32Memory0.buffer !== wasm.memory.buffer) {\n    cachegetFloat32Memory0 = new Float32Array(wasm.memory.buffer);\n  }\n\n  return cachegetFloat32Memory0;\n}\n\nvar WASM_VECTOR_LEN = 0;\n\nfunction passArrayF32ToWasm0(arg, malloc) {\n  var ptr = malloc(arg.length * 4);\n  getFloat32Memory0().set(arg, ptr / 4);\n  WASM_VECTOR_LEN = arg.length;\n  return ptr;\n}\n\nfunction _assertClass(instance, klass) {\n  if (!(instance instanceof klass)) {\n    throw new Error(\"expected instance of \".concat(klass.name));\n  }\n\n  return instance.ptr;\n}\n/**\n* @param {number} fabric_feature\n* @returns {number}\n*/\n\n\nexport function default_world_feature(fabric_feature) {\n  var ret = wasm.default_world_feature(fabric_feature);\n  return ret;\n}\n/**\n*/\n\nexport var Stage = Object.freeze({\n  Growing: 0,\n  Shaping: 1,\n  Slack: 2,\n  Pretensing: 3,\n  Pretenst: 4\n});\n/**\n*/\n\nexport var SurfaceCharacter = Object.freeze({\n  Frozen: 0,\n  Sticky: 1,\n  Bouncy: 2\n});\n/**\n*/\n\nexport var WorldFeature = Object.freeze({\n  Gravity: 0,\n  Antigravity: 1,\n  ShapingDrag: 2,\n  Drag: 3,\n  ShapingPretenstFactor: 4,\n  PretenstFactor: 5,\n  IterationsPerFrame: 6,\n  IntervalCountdown: 7,\n  PretensingCountdown: 8,\n  PushOverPull: 9,\n  VisualStrain: 10\n});\n/**\n*/\n\nexport var Fabric = /*#__PURE__*/function () {\n  function Fabric() {\n    _classCallCheck(this, Fabric);\n  }\n\n  _createClass(Fabric, [{\n    key: \"free\",\n    value: function free() {\n      var ptr = this.ptr;\n      this.ptr = 0;\n\n      wasm.__wbg_fabric_free(ptr);\n    }\n    /**\n    * @returns {number}\n    */\n\n  }, {\n    key: \"clear\",\n\n    /**\n    */\n    value: function clear() {\n      wasm.fabric_clear(this.ptr);\n    }\n    /**\n    * @returns {Fabric}\n    */\n\n  }, {\n    key: \"clone\",\n    value: function clone() {\n      var ret = wasm.fabric_clone(this.ptr);\n      return Fabric.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n\n  }, {\n    key: \"get_joint_count\",\n    value: function get_joint_count() {\n      var ret = wasm.fabric_get_joint_count(this.ptr);\n      return ret;\n    }\n    /**\n    * @returns {number}\n    */\n\n  }, {\n    key: \"get_interval_count\",\n    value: function get_interval_count() {\n      var ret = wasm.fabric_get_interval_count(this.ptr);\n      return ret;\n    }\n    /**\n    * @returns {number}\n    */\n\n  }, {\n    key: \"get_face_count\",\n    value: function get_face_count() {\n      var ret = wasm.fabric_get_face_count(this.ptr);\n      return ret;\n    }\n    /**\n    * @param {number} x\n    * @param {number} y\n    * @param {number} z\n    * @returns {number}\n    */\n\n  }, {\n    key: \"create_joint\",\n    value: function create_joint(x, y, z) {\n      var ret = wasm.fabric_create_joint(this.ptr, x, y, z);\n      return ret >>> 0;\n    }\n    /**\n    * @param {number} alpha_index\n    * @param {number} omega_index\n    * @param {boolean} push\n    * @param {number} ideal_length\n    * @param {number} rest_length\n    * @param {number} stiffness\n    * @param {number} linear_density\n    * @param {number} countdown\n    * @returns {number}\n    */\n\n  }, {\n    key: \"create_interval\",\n    value: function create_interval(alpha_index, omega_index, push, ideal_length, rest_length, stiffness, linear_density, countdown) {\n      var ret = wasm.fabric_create_interval(this.ptr, alpha_index, omega_index, push, ideal_length, rest_length, stiffness, linear_density, countdown);\n      return ret >>> 0;\n    }\n    /**\n    * @param {number} index\n    */\n\n  }, {\n    key: \"remove_interval\",\n    value: function remove_interval(index) {\n      wasm.fabric_remove_interval(this.ptr, index);\n    }\n    /**\n    * @param {number} joint0\n    * @param {number} joint1\n    * @param {number} joint2\n    * @returns {number}\n    */\n\n  }, {\n    key: \"create_face\",\n    value: function create_face(joint0, joint1, joint2) {\n      var ret = wasm.fabric_create_face(this.ptr, joint0, joint1, joint2);\n      return ret >>> 0;\n    }\n    /**\n    * @param {number} index\n    */\n\n  }, {\n    key: \"remove_face\",\n    value: function remove_face(index) {\n      wasm.fabric_remove_face(this.ptr, index);\n    }\n    /**\n    * @param {number} face_index\n    * @param {number} attack_countdown\n    * @param {number} decay_countdown\n    * @param {number} delta_size_nuance\n    */\n\n  }, {\n    key: \"twitch_face\",\n    value: function twitch_face(face_index, attack_countdown, decay_countdown, delta_size_nuance) {\n      wasm.fabric_twitch_face(this.ptr, face_index, attack_countdown, decay_countdown, delta_size_nuance);\n    }\n    /**\n    */\n\n  }, {\n    key: \"centralize\",\n    value: function centralize() {\n      wasm.fabric_centralize(this.ptr);\n    }\n    /**\n    * @param {number} altitude\n    */\n\n  }, {\n    key: \"set_altitude\",\n    value: function set_altitude(altitude) {\n      wasm.fabric_set_altitude(this.ptr, altitude);\n    }\n    /**\n    * @param {number} index\n    * @param {number} factor\n    * @param {number} countdown\n    */\n\n  }, {\n    key: \"multiply_rest_length\",\n    value: function multiply_rest_length(index, factor, countdown) {\n      wasm.fabric_multiply_rest_length(this.ptr, index, factor, countdown);\n    }\n    /**\n    * @param {number} index\n    * @param {number} rest_length\n    * @param {number} countdown\n    */\n\n  }, {\n    key: \"change_rest_length\",\n    value: function change_rest_length(index, rest_length, countdown) {\n      wasm.fabric_change_rest_length(this.ptr, index, rest_length, countdown);\n    }\n    /**\n    * @param {Float32Array} m\n    */\n\n  }, {\n    key: \"apply_matrix4\",\n    value: function apply_matrix4(m) {\n      var ptr0 = passArrayF32ToWasm0(m, wasm.__wbindgen_malloc);\n      var len0 = WASM_VECTOR_LEN;\n      wasm.fabric_apply_matrix4(this.ptr, ptr0, len0);\n    }\n    /**\n    * @param {Float32Array} new_stiffnesses\n    * @param {Float32Array} new_linear_densities\n    */\n\n  }, {\n    key: \"copy_material\",\n    value: function copy_material(new_stiffnesses, new_linear_densities) {\n      try {\n        var ptr0 = passArrayF32ToWasm0(new_stiffnesses, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ptr1 = passArrayF32ToWasm0(new_linear_densities, wasm.__wbindgen_malloc);\n        var len1 = WASM_VECTOR_LEN;\n        wasm.fabric_copy_material(this.ptr, ptr0, len0, ptr1, len1);\n      } finally {\n        new_stiffnesses.set(getFloat32Memory0().subarray(ptr0 / 4, ptr0 / 4 + len0));\n\n        wasm.__wbindgen_free(ptr0, len0 * 4);\n\n        new_linear_densities.set(getFloat32Memory0().subarray(ptr1 / 4, ptr1 / 4 + len1));\n\n        wasm.__wbindgen_free(ptr1, len1 * 4);\n      }\n    }\n    /**\n    * @param {World} world\n    * @returns {boolean}\n    */\n\n  }, {\n    key: \"iterate\",\n    value: function iterate(world) {\n      _assertClass(world, World);\n\n      var ret = wasm.fabric_iterate(this.ptr, world.ptr);\n      return ret !== 0;\n    }\n    /**\n    * @returns {number}\n    */\n\n  }, {\n    key: \"get_stage\",\n    value: function get_stage() {\n      var ret = wasm.fabric_get_stage(this.ptr);\n      return ret >>> 0;\n    }\n    /**\n    * @param {number} requested_stage\n    * @param {World} world\n    * @returns {number | undefined}\n    */\n\n  }, {\n    key: \"request_stage\",\n    value: function request_stage(requested_stage, world) {\n      _assertClass(world, World);\n\n      var ret = wasm.fabric_request_stage(this.ptr, requested_stage, world.ptr);\n      return ret === 5 ? undefined : ret;\n    }\n  }, {\n    key: \"age\",\n    get: function get() {\n      var ret = wasm.__wbg_get_fabric_age(this.ptr);\n\n      return ret >>> 0;\n    }\n    /**\n    * @param {number} arg0\n    */\n    ,\n    set: function set(arg0) {\n      wasm.__wbg_set_fabric_age(this.ptr, arg0);\n    }\n    /**\n    * @param {number} joint_count\n    * @returns {Fabric}\n    */\n\n  }], [{\n    key: \"__wrap\",\n    value: function __wrap(ptr) {\n      var obj = Object.create(Fabric.prototype);\n      obj.ptr = ptr;\n      return obj;\n    }\n  }, {\n    key: \"new\",\n    value: function _new(joint_count) {\n      var ret = wasm.fabric_new(joint_count);\n      return Fabric.__wrap(ret);\n    }\n  }]);\n\n  return Fabric;\n}();\n/**\n*/\n\nexport var View = /*#__PURE__*/function () {\n  function View() {\n    _classCallCheck(this, View);\n  }\n\n  _createClass(View, [{\n    key: \"free\",\n    value: function free() {\n      var ptr = this.ptr;\n      this.ptr = 0;\n\n      wasm.__wbg_view_free(ptr);\n    }\n    /**\n    * @param {Fabric} fabric\n    * @returns {View}\n    */\n\n  }, {\n    key: \"render\",\n\n    /**\n    * @param {Fabric} fabric\n    * @param {World} world\n    */\n    value: function render(fabric, world) {\n      _assertClass(fabric, Fabric);\n\n      _assertClass(world, World);\n\n      wasm.view_render(this.ptr, fabric.ptr, world.ptr);\n    }\n    /**\n    * @returns {number}\n    */\n\n  }, {\n    key: \"midpoint_x\",\n    value: function midpoint_x() {\n      var ret = wasm.view_midpoint_x(this.ptr);\n      return ret;\n    }\n    /**\n    * @returns {number}\n    */\n\n  }, {\n    key: \"midpoint_y\",\n    value: function midpoint_y() {\n      var ret = wasm.view_midpoint_y(this.ptr);\n      return ret;\n    }\n    /**\n    * @returns {number}\n    */\n\n  }, {\n    key: \"midpoint_z\",\n    value: function midpoint_z() {\n      var ret = wasm.view_midpoint_z(this.ptr);\n      return ret;\n    }\n    /**\n    * @returns {number}\n    */\n\n  }, {\n    key: \"radius\",\n    value: function radius() {\n      var ret = wasm.view_radius(this.ptr);\n      return ret;\n    }\n    /**\n    * @param {Float32Array} joint_locations\n    */\n\n  }, {\n    key: \"copy_joint_locations_to\",\n    value: function copy_joint_locations_to(joint_locations) {\n      try {\n        var ptr0 = passArrayF32ToWasm0(joint_locations, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.view_copy_joint_locations_to(this.ptr, ptr0, len0);\n      } finally {\n        joint_locations.set(getFloat32Memory0().subarray(ptr0 / 4, ptr0 / 4 + len0));\n\n        wasm.__wbindgen_free(ptr0, len0 * 4);\n      }\n    }\n    /**\n    * @param {Float32Array} joint_velocities\n    */\n\n  }, {\n    key: \"copy_joint_velocities_to\",\n    value: function copy_joint_velocities_to(joint_velocities) {\n      try {\n        var ptr0 = passArrayF32ToWasm0(joint_velocities, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.view_copy_joint_velocities_to(this.ptr, ptr0, len0);\n      } finally {\n        joint_velocities.set(getFloat32Memory0().subarray(ptr0 / 4, ptr0 / 4 + len0));\n\n        wasm.__wbindgen_free(ptr0, len0 * 4);\n      }\n    }\n    /**\n    * @param {Float32Array} line_locations\n    */\n\n  }, {\n    key: \"copy_line_locations_to\",\n    value: function copy_line_locations_to(line_locations) {\n      try {\n        var ptr0 = passArrayF32ToWasm0(line_locations, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.view_copy_line_locations_to(this.ptr, ptr0, len0);\n      } finally {\n        line_locations.set(getFloat32Memory0().subarray(ptr0 / 4, ptr0 / 4 + len0));\n\n        wasm.__wbindgen_free(ptr0, len0 * 4);\n      }\n    }\n    /**\n    * @param {Float32Array} line_colors\n    */\n\n  }, {\n    key: \"copy_line_colors_to\",\n    value: function copy_line_colors_to(line_colors) {\n      try {\n        var ptr0 = passArrayF32ToWasm0(line_colors, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.view_copy_line_colors_to(this.ptr, ptr0, len0);\n      } finally {\n        line_colors.set(getFloat32Memory0().subarray(ptr0 / 4, ptr0 / 4 + len0));\n\n        wasm.__wbindgen_free(ptr0, len0 * 4);\n      }\n    }\n    /**\n    * @param {Float32Array} face_midpoints\n    */\n\n  }, {\n    key: \"copy_face_midpoints_to\",\n    value: function copy_face_midpoints_to(face_midpoints) {\n      try {\n        var ptr0 = passArrayF32ToWasm0(face_midpoints, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.view_copy_face_midpoints_to(this.ptr, ptr0, len0);\n      } finally {\n        face_midpoints.set(getFloat32Memory0().subarray(ptr0 / 4, ptr0 / 4 + len0));\n\n        wasm.__wbindgen_free(ptr0, len0 * 4);\n      }\n    }\n    /**\n    * @param {Float32Array} face_normals\n    */\n\n  }, {\n    key: \"copy_face_normals_to\",\n    value: function copy_face_normals_to(face_normals) {\n      try {\n        var ptr0 = passArrayF32ToWasm0(face_normals, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.view_copy_face_normals_to(this.ptr, ptr0, len0);\n      } finally {\n        face_normals.set(getFloat32Memory0().subarray(ptr0 / 4, ptr0 / 4 + len0));\n\n        wasm.__wbindgen_free(ptr0, len0 * 4);\n      }\n    }\n    /**\n    * @param {Float32Array} face_vertex_locations\n    */\n\n  }, {\n    key: \"copy_face_vertex_locations_to\",\n    value: function copy_face_vertex_locations_to(face_vertex_locations) {\n      try {\n        var ptr0 = passArrayF32ToWasm0(face_vertex_locations, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.view_copy_face_vertex_locations_to(this.ptr, ptr0, len0);\n      } finally {\n        face_vertex_locations.set(getFloat32Memory0().subarray(ptr0 / 4, ptr0 / 4 + len0));\n\n        wasm.__wbindgen_free(ptr0, len0 * 4);\n      }\n    }\n    /**\n    * @param {Float32Array} unit_vectors\n    */\n\n  }, {\n    key: \"copy_unit_vectors_to\",\n    value: function copy_unit_vectors_to(unit_vectors) {\n      try {\n        var ptr0 = passArrayF32ToWasm0(unit_vectors, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.view_copy_unit_vectors_to(this.ptr, ptr0, len0);\n      } finally {\n        unit_vectors.set(getFloat32Memory0().subarray(ptr0 / 4, ptr0 / 4 + len0));\n\n        wasm.__wbindgen_free(ptr0, len0 * 4);\n      }\n    }\n    /**\n    * @param {Float32Array} ideal_lengths\n    */\n\n  }, {\n    key: \"copy_ideal_lengths_to\",\n    value: function copy_ideal_lengths_to(ideal_lengths) {\n      try {\n        var ptr0 = passArrayF32ToWasm0(ideal_lengths, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.view_copy_ideal_lengths_to(this.ptr, ptr0, len0);\n      } finally {\n        ideal_lengths.set(getFloat32Memory0().subarray(ptr0 / 4, ptr0 / 4 + len0));\n\n        wasm.__wbindgen_free(ptr0, len0 * 4);\n      }\n    }\n    /**\n    * @param {Float32Array} strains\n    */\n\n  }, {\n    key: \"copy_strains_to\",\n    value: function copy_strains_to(strains) {\n      try {\n        var ptr0 = passArrayF32ToWasm0(strains, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.view_copy_strains_to(this.ptr, ptr0, len0);\n      } finally {\n        strains.set(getFloat32Memory0().subarray(ptr0 / 4, ptr0 / 4 + len0));\n\n        wasm.__wbindgen_free(ptr0, len0 * 4);\n      }\n    }\n    /**\n    * @param {Float32Array} strain_limits\n    */\n\n  }, {\n    key: \"copy_strain_limits_to\",\n    value: function copy_strain_limits_to(strain_limits) {\n      try {\n        var ptr0 = passArrayF32ToWasm0(strain_limits, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.view_copy_strain_limits_to(this.ptr, ptr0, len0);\n      } finally {\n        strain_limits.set(getFloat32Memory0().subarray(ptr0 / 4, ptr0 / 4 + len0));\n\n        wasm.__wbindgen_free(ptr0, len0 * 4);\n      }\n    }\n    /**\n    * @param {Float32Array} strain_nuances\n    */\n\n  }, {\n    key: \"copy_strain_nuances_to\",\n    value: function copy_strain_nuances_to(strain_nuances) {\n      try {\n        var ptr0 = passArrayF32ToWasm0(strain_nuances, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.view_copy_strain_nuances_to(this.ptr, ptr0, len0);\n      } finally {\n        strain_nuances.set(getFloat32Memory0().subarray(ptr0 / 4, ptr0 / 4 + len0));\n\n        wasm.__wbindgen_free(ptr0, len0 * 4);\n      }\n    }\n    /**\n    * @param {Float32Array} stiffnesses\n    */\n\n  }, {\n    key: \"copy_stiffnesses_to\",\n    value: function copy_stiffnesses_to(stiffnesses) {\n      try {\n        var ptr0 = passArrayF32ToWasm0(stiffnesses, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.view_copy_stiffnesses_to(this.ptr, ptr0, len0);\n      } finally {\n        stiffnesses.set(getFloat32Memory0().subarray(ptr0 / 4, ptr0 / 4 + len0));\n\n        wasm.__wbindgen_free(ptr0, len0 * 4);\n      }\n    }\n    /**\n    * @param {Float32Array} linear_densities\n    */\n\n  }, {\n    key: \"copy_linear_densities_to\",\n    value: function copy_linear_densities_to(linear_densities) {\n      try {\n        var ptr0 = passArrayF32ToWasm0(linear_densities, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.view_copy_linear_densities_to(this.ptr, ptr0, len0);\n      } finally {\n        linear_densities.set(getFloat32Memory0().subarray(ptr0 / 4, ptr0 / 4 + len0));\n\n        wasm.__wbindgen_free(ptr0, len0 * 4);\n      }\n    }\n  }], [{\n    key: \"__wrap\",\n    value: function __wrap(ptr) {\n      var obj = Object.create(View.prototype);\n      obj.ptr = ptr;\n      return obj;\n    }\n  }, {\n    key: \"on_fabric\",\n    value: function on_fabric(fabric) {\n      _assertClass(fabric, Fabric);\n\n      var ret = wasm.view_on_fabric(fabric.ptr);\n      return View.__wrap(ret);\n    }\n  }]);\n\n  return View;\n}();\n/**\n*/\n\nexport var World = /*#__PURE__*/function () {\n  function World() {\n    _classCallCheck(this, World);\n  }\n\n  _createClass(World, [{\n    key: \"free\",\n    value: function free() {\n      var ptr = this.ptr;\n      this.ptr = 0;\n\n      wasm.__wbg_world_free(ptr);\n    }\n    /**\n    * @param {number} surface_character\n    * @returns {World}\n    */\n\n  }, {\n    key: \"set_surface_character\",\n\n    /**\n    * @param {number} surface_character\n    */\n    value: function set_surface_character(surface_character) {\n      wasm.world_set_surface_character(this.ptr, surface_character);\n    }\n    /**\n    * @param {boolean} push_and_pull\n    */\n\n  }, {\n    key: \"set_push_and_pull\",\n    value: function set_push_and_pull(push_and_pull) {\n      wasm.world_set_push_and_pull(this.ptr, push_and_pull);\n    }\n    /**\n    * @param {number} feature\n    * @param {number} value\n    * @returns {number}\n    */\n\n  }, {\n    key: \"set_float_value\",\n    value: function set_float_value(feature, value) {\n      var ret = wasm.world_set_float_value(this.ptr, feature, value);\n      return ret;\n    }\n    /**\n    * @param {number} feature\n    * @param {number} percent\n    * @returns {number}\n    */\n\n  }, {\n    key: \"set_float_percent\",\n    value: function set_float_percent(feature, percent) {\n      var ret = wasm.world_set_float_percent(this.ptr, feature, percent);\n      return ret;\n    }\n  }], [{\n    key: \"__wrap\",\n    value: function __wrap(ptr) {\n      var obj = Object.create(World.prototype);\n      obj.ptr = ptr;\n      return obj;\n    }\n  }, {\n    key: \"new\",\n    value: function _new(surface_character) {\n      var ret = wasm.world_new(surface_character);\n      return World.__wrap(ret);\n    }\n  }]);\n\n  return World;\n}();\nexport var __wbindgen_throw = function __wbindgen_throw(arg0, arg1) {\n  throw new Error(getStringFromWasm0(arg0, arg1));\n};"],"sourceRoot":""}