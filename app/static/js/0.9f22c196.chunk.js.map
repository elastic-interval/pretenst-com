{"version":3,"sources":["../../eig/pkg/eig.js"],"names":["cachedTextDecoder","TextDecoder","ignoreBOM","fatal","decode","cachegetUint8Memory0","getStringFromWasm0","ptr","len","buffer","Uint8Array","subarray","cachegetFloat32Memory0","getFloat32Memory0","Float32Array","WASM_VECTOR_LEN","passArrayF32ToWasm0","arg","malloc","length","set","_assertClass","instance","klass","Error","concat","name","default_world_feature","fabric_feature","Stage","Object","freeze","Growing","Shaping","Slack","Pretensing","Pretenst","SurfaceCharacter","Frozen","Sticky","Bouncy","WorldFeature","VisualStrain","IterationsPerFrame","Gravity","PretenstFactor","StiffnessFactor","PushOverPull","Drag","ShapingPretenstFactor","ShapingDrag","ShapingStiffnessFactor","Antigravity","IntervalCountdown","PretensingCountdown","Fabric","obj","create","prototype","this","arg0","joint_count","ret","__wrap","x","y","z","index","alpha_index","omega_index","push","length_0","length_1","stiffness","attack","joint0","joint1","joint2","interval_index","attack_countdown","decay_countdown","delta_size_nuance","altitude","factor","countdown","rest_length","m","ptr0","len0","new_stiffnesses","world","World","requested_stage","undefined","View","fabric","joint_locations","joint_velocities","line_locations","line_colors","face_midpoints","face_normals","face_vertex_locations","unit_vectors","ideal_lengths","strains","strain_limits","strain_nuances","stiffnesses","linear_densities","surface_character","push_and_pull","feature","value","percent","__wbindgen_throw","arg1"],"mappings":"wGAAA,gXACA,IAAIA,EAAoB,IAAIC,YAAY,QAAS,CAC/CC,WAAW,EACXC,OAAO,IAETH,EAAkBI,SAClB,IAAIC,EAAuB,KAU3B,SAASC,EAAmBC,EAAKC,GAC/B,OAAOR,EAAkBI,QARI,OAAzBC,GAAiCA,EAAqBI,SAAW,IAAYA,SAC/EJ,EAAuB,IAAIK,WAAW,IAAYD,SAG7CJ,GAI2CM,SAASJ,EAAKA,EAAMC,IAGxE,IAAII,EAAyB,KAE7B,SAASC,IAKP,OAJ+B,OAA3BD,GAAmCA,EAAuBH,SAAW,IAAYA,SACnFG,EAAyB,IAAIE,aAAa,IAAYL,SAGjDG,EAGT,IAAIG,EAAkB,EAEtB,SAASC,EAAoBC,EAAKC,GAChC,MAAMX,EAAMW,EAAoB,EAAbD,EAAIE,QAGvB,OAFAN,IAAoBO,IAAIH,EAAKV,EAAM,GACnCQ,EAAkBE,EAAIE,OACfZ,EAGT,SAASc,EAAaC,EAAUC,GAC9B,KAAMD,aAAoBC,GACxB,MAAM,IAAIC,MAAM,wBAAwBC,OAAOF,EAAMG,OAGvD,OAAOJ,EAASf,IAQX,SAASoB,EAAsBC,GAEpC,OADU,IAA2BA,GAMhC,MAAMC,EAAQC,OAAOC,OAAO,CACjCC,QAAS,EACTC,QAAS,EACTC,MAAO,EACPC,WAAY,EACZC,SAAU,IAKCC,EAAmBP,OAAOC,OAAO,CAC5CO,OAAQ,EACRC,OAAQ,EACRC,OAAQ,IAKGC,EAAeX,OAAOC,OAAO,CACxCW,aAAc,EACdC,mBAAoB,EACpBC,QAAS,EACTC,eAAgB,EAChBC,gBAAiB,EACjBC,aAAc,EACdC,KAAM,EACNC,sBAAuB,EACvBC,YAAa,EACbC,uBAAwB,EACxBC,YAAa,GACbC,kBAAmB,GACnBC,oBAAqB,KAKhB,MAAMC,EACX,cAAchD,GACZ,MAAMiD,EAAM1B,OAAO2B,OAAOF,EAAOG,WAEjC,OADAF,EAAIjD,IAAMA,EACHiD,EAGT,OACE,MAAMjD,EAAMoD,KAAKpD,IACjBoD,KAAKpD,IAAM,EAEX,IAAuBA,GAOzB,UAGE,OAFU,IAA0BoD,KAAKpD,OAE1B,EAOjB,QAAQqD,GACN,IAA0BD,KAAKpD,IAAKqD,GAQtC,WAAWC,GACT,IAAIC,EAAM,IAAgBD,GAC1B,OAAON,EAAOQ,OAAOD,GAMvB,QACE,IAAkBH,KAAKpD,KAOzB,QACE,IAAIuD,EAAM,IAAkBH,KAAKpD,KACjC,OAAOgD,EAAOQ,OAAOD,GAOvB,kBAEE,OADU,IAA4BH,KAAKpD,KAQ7C,qBAEE,OADU,IAA+BoD,KAAKpD,KAQhD,iBAEE,OADU,IAA2BoD,KAAKpD,KAW5C,aAAayD,EAAGC,EAAGC,GAEjB,OADU,IAAyBP,KAAKpD,IAAKyD,EAAGC,EAAGC,KACpC,EAOjB,aAAaC,GACX,IAAyBR,KAAKpD,IAAK4D,GAcrC,gBAAgBC,EAAaC,EAAaC,EAAMC,EAAUC,EAAUC,EAAWC,GAE7E,OADU,IAA4Bf,KAAKpD,IAAK6D,EAAaC,EAAaC,EAAMC,EAAUC,EAAUC,EAAWC,KAChG,EAOjB,gBAAgBP,GACd,IAA4BR,KAAKpD,IAAK4D,GAUxC,YAAYQ,EAAQC,EAAQC,GAE1B,OADU,IAAwBlB,KAAKpD,IAAKoE,EAAQC,EAAQC,KAC7C,EAOjB,YAAYV,GACV,IAAwBR,KAAKpD,IAAK4D,GAUpC,gBAAgBW,EAAgBC,EAAkBC,EAAiBC,GACjE,IAA4BtB,KAAKpD,IAAKuE,EAAgBC,EAAkBC,EAAiBC,GAM3F,aACE,IAAuBtB,KAAKpD,KAO9B,aAAa2E,GACX,IAAyBvB,KAAKpD,IAAK2E,GASrC,qBAAqBf,EAAOgB,EAAQC,GAClC,IAAiCzB,KAAKpD,IAAK4D,EAAOgB,EAAQC,GAS5D,mBAAmBjB,EAAOkB,EAAaD,GACrC,IAA+BzB,KAAKpD,IAAK4D,EAAOkB,EAAaD,GAO/D,cAAcE,GACZ,IAAIC,EAAOvE,EAAoBsE,EAAG,KAC9BE,EAAOzE,EACX,IAA0B4C,KAAKpD,IAAKgF,EAAMC,GAO5C,iBAAiBC,GACf,IACE,IAAIF,EAAOvE,EAAoByE,EAAiB,KAC5CD,EAAOzE,EACX,IAA6B4C,KAAKpD,IAAKgF,EAAMC,GAC7C,QACAC,EAAgBrE,IAAIP,IAAoBF,SAAS4E,EAAO,EAAGA,EAAO,EAAIC,IAEtE,IAAqBD,EAAa,EAAPC,IAS/B,QAAQE,GAIN,OAHArE,EAAaqE,EAAOC,GAGL,IADL,IAAoBhC,KAAKpD,IAAKmF,EAAMnF,KAQhD,YAEE,OADU,IAAsBoD,KAAKpD,OACtB,EASjB,cAAcqF,EAAiBF,GAC7BrE,EAAaqE,EAAOC,GAEpB,IAAI7B,EAAM,IAA0BH,KAAKpD,IAAKqF,EAAiBF,EAAMnF,KACrE,OAAe,IAARuD,OAAY+B,EAAY/B,GAO5B,MAAMgC,EACX,cAAcvF,GACZ,MAAMiD,EAAM1B,OAAO2B,OAAOqC,EAAKpC,WAE/B,OADAF,EAAIjD,IAAMA,EACHiD,EAGT,OACE,MAAMjD,EAAMoD,KAAKpD,IACjBoD,KAAKpD,IAAM,EAEX,IAAqBA,GAQvB,iBAAiBwF,GACf1E,EAAa0E,EAAQxC,GAErB,IAAIO,EAAM,IAAoBiC,EAAOxF,KACrC,OAAOuF,EAAK/B,OAAOD,GAQrB,OAAOiC,EAAQL,GACbrE,EAAa0E,EAAQxC,GAErBlC,EAAaqE,EAAOC,GAEpB,IAAiBhC,KAAKpD,IAAKwF,EAAOxF,IAAKmF,EAAMnF,KAO/C,aAEE,OADU,IAAqBoD,KAAKpD,KAQtC,aAEE,OADU,IAAqBoD,KAAKpD,KAQtC,aAEE,OADU,IAAqBoD,KAAKpD,KAQtC,SAEE,OADU,IAAiBoD,KAAKpD,KAQlC,wBAAwByF,GACtB,IACE,IAAIT,EAAOvE,EAAoBgF,EAAiB,KAC5CR,EAAOzE,EACX,IAAkC4C,KAAKpD,IAAKgF,EAAMC,GAClD,QACAQ,EAAgB5E,IAAIP,IAAoBF,SAAS4E,EAAO,EAAGA,EAAO,EAAIC,IAEtE,IAAqBD,EAAa,EAAPC,IAQ/B,yBAAyBS,GACvB,IACE,IAAIV,EAAOvE,EAAoBiF,EAAkB,KAC7CT,EAAOzE,EACX,IAAmC4C,KAAKpD,IAAKgF,EAAMC,GACnD,QACAS,EAAiB7E,IAAIP,IAAoBF,SAAS4E,EAAO,EAAGA,EAAO,EAAIC,IAEvE,IAAqBD,EAAa,EAAPC,IAQ/B,uBAAuBU,GACrB,IACE,IAAIX,EAAOvE,EAAoBkF,EAAgB,KAC3CV,EAAOzE,EACX,IAAiC4C,KAAKpD,IAAKgF,EAAMC,GACjD,QACAU,EAAe9E,IAAIP,IAAoBF,SAAS4E,EAAO,EAAGA,EAAO,EAAIC,IAErE,IAAqBD,EAAa,EAAPC,IAQ/B,oBAAoBW,GAClB,IACE,IAAIZ,EAAOvE,EAAoBmF,EAAa,KACxCX,EAAOzE,EACX,IAA8B4C,KAAKpD,IAAKgF,EAAMC,GAC9C,QACAW,EAAY/E,IAAIP,IAAoBF,SAAS4E,EAAO,EAAGA,EAAO,EAAIC,IAElE,IAAqBD,EAAa,EAAPC,IAQ/B,uBAAuBY,GACrB,IACE,IAAIb,EAAOvE,EAAoBoF,EAAgB,KAC3CZ,EAAOzE,EACX,IAAiC4C,KAAKpD,IAAKgF,EAAMC,GACjD,QACAY,EAAehF,IAAIP,IAAoBF,SAAS4E,EAAO,EAAGA,EAAO,EAAIC,IAErE,IAAqBD,EAAa,EAAPC,IAQ/B,qBAAqBa,GACnB,IACE,IAAId,EAAOvE,EAAoBqF,EAAc,KACzCb,EAAOzE,EACX,IAA+B4C,KAAKpD,IAAKgF,EAAMC,GAC/C,QACAa,EAAajF,IAAIP,IAAoBF,SAAS4E,EAAO,EAAGA,EAAO,EAAIC,IAEnE,IAAqBD,EAAa,EAAPC,IAQ/B,8BAA8Bc,GAC5B,IACE,IAAIf,EAAOvE,EAAoBsF,EAAuB,KAClDd,EAAOzE,EACX,IAAwC4C,KAAKpD,IAAKgF,EAAMC,GACxD,QACAc,EAAsBlF,IAAIP,IAAoBF,SAAS4E,EAAO,EAAGA,EAAO,EAAIC,IAE5E,IAAqBD,EAAa,EAAPC,IAQ/B,qBAAqBe,GACnB,IACE,IAAIhB,EAAOvE,EAAoBuF,EAAc,KACzCf,EAAOzE,EACX,IAA+B4C,KAAKpD,IAAKgF,EAAMC,GAC/C,QACAe,EAAanF,IAAIP,IAAoBF,SAAS4E,EAAO,EAAGA,EAAO,EAAIC,IAEnE,IAAqBD,EAAa,EAAPC,IAQ/B,sBAAsBgB,GACpB,IACE,IAAIjB,EAAOvE,EAAoBwF,EAAe,KAC1ChB,EAAOzE,EACX,IAAgC4C,KAAKpD,IAAKgF,EAAMC,GAChD,QACAgB,EAAcpF,IAAIP,IAAoBF,SAAS4E,EAAO,EAAGA,EAAO,EAAIC,IAEpE,IAAqBD,EAAa,EAAPC,IAQ/B,gBAAgBiB,GACd,IACE,IAAIlB,EAAOvE,EAAoByF,EAAS,KACpCjB,EAAOzE,EACX,IAA0B4C,KAAKpD,IAAKgF,EAAMC,GAC1C,QACAiB,EAAQrF,IAAIP,IAAoBF,SAAS4E,EAAO,EAAGA,EAAO,EAAIC,IAE9D,IAAqBD,EAAa,EAAPC,IAQ/B,sBAAsBkB,GACpB,IACE,IAAInB,EAAOvE,EAAoB0F,EAAe,KAC1ClB,EAAOzE,EACX,IAAgC4C,KAAKpD,IAAKgF,EAAMC,GAChD,QACAkB,EAActF,IAAIP,IAAoBF,SAAS4E,EAAO,EAAGA,EAAO,EAAIC,IAEpE,IAAqBD,EAAa,EAAPC,IAQ/B,uBAAuBmB,GACrB,IACE,IAAIpB,EAAOvE,EAAoB2F,EAAgB,KAC3CnB,EAAOzE,EACX,IAAiC4C,KAAKpD,IAAKgF,EAAMC,GACjD,QACAmB,EAAevF,IAAIP,IAAoBF,SAAS4E,EAAO,EAAGA,EAAO,EAAIC,IAErE,IAAqBD,EAAa,EAAPC,IAQ/B,oBAAoBoB,GAClB,IACE,IAAIrB,EAAOvE,EAAoB4F,EAAa,KACxCpB,EAAOzE,EACX,IAA8B4C,KAAKpD,IAAKgF,EAAMC,GAC9C,QACAoB,EAAYxF,IAAIP,IAAoBF,SAAS4E,EAAO,EAAGA,EAAO,EAAIC,IAElE,IAAqBD,EAAa,EAAPC,IAQ/B,yBAAyBqB,GACvB,IACE,IAAItB,EAAOvE,EAAoB6F,EAAkB,KAC7CrB,EAAOzE,EACX,IAAmC4C,KAAKpD,IAAKgF,EAAMC,GACnD,QACAqB,EAAiBzF,IAAIP,IAAoBF,SAAS4E,EAAO,EAAGA,EAAO,EAAIC,IAEvE,IAAqBD,EAAa,EAAPC,KAQ1B,MAAMG,EACX,cAAcpF,GACZ,MAAMiD,EAAM1B,OAAO2B,OAAOkC,EAAMjC,WAEhC,OADAF,EAAIjD,IAAMA,EACHiD,EAGT,OACE,MAAMjD,EAAMoD,KAAKpD,IACjBoD,KAAKpD,IAAM,EAEX,IAAsBA,GAOxB,aACE,IAAIuD,EAAM,OACV,OAAO6B,EAAM5B,OAAOD,GAOtB,sBAAsBgD,GACpB,KAAiCnD,KAAKpD,IAAKuG,GAO7C,kBAAkBC,GAChB,KAA6BpD,KAAKpD,IAAKwG,GAQzC,gBAAgBC,GAEd,OADU,IAA2BrD,KAAKpD,IAAKyG,GAUjD,gBAAgBA,EAASC,GAEvB,OADU,KAA2BtD,KAAKpD,IAAKyG,EAASC,GAU1D,kBAAkBD,EAASE,GAEzB,OADU,KAA6BvD,KAAKpD,IAAKyG,EAASE,GAS5D,kBAAkBnB,GAIhB,OAHA1E,EAAa0E,EAAQxC,GAEX,KAA6BI,KAAKpD,IAAKwF,EAAOxF,MAKrD,MAAM4G,EAAmB,SAAUvD,EAAMwD,GAC9C,MAAM,IAAI5F,MAAMlB,EAAmBsD,EAAMwD,M","file":"static/js/0.9f22c196.chunk.js","sourcesContent":["import * as wasm from './eig_bg.wasm';\nlet cachedTextDecoder = new TextDecoder('utf-8', {\n  ignoreBOM: true,\n  fatal: true\n});\ncachedTextDecoder.decode();\nlet cachegetUint8Memory0 = null;\n\nfunction getUint8Memory0() {\n  if (cachegetUint8Memory0 === null || cachegetUint8Memory0.buffer !== wasm.memory.buffer) {\n    cachegetUint8Memory0 = new Uint8Array(wasm.memory.buffer);\n  }\n\n  return cachegetUint8Memory0;\n}\n\nfunction getStringFromWasm0(ptr, len) {\n  return cachedTextDecoder.decode(getUint8Memory0().subarray(ptr, ptr + len));\n}\n\nlet cachegetFloat32Memory0 = null;\n\nfunction getFloat32Memory0() {\n  if (cachegetFloat32Memory0 === null || cachegetFloat32Memory0.buffer !== wasm.memory.buffer) {\n    cachegetFloat32Memory0 = new Float32Array(wasm.memory.buffer);\n  }\n\n  return cachegetFloat32Memory0;\n}\n\nlet WASM_VECTOR_LEN = 0;\n\nfunction passArrayF32ToWasm0(arg, malloc) {\n  const ptr = malloc(arg.length * 4);\n  getFloat32Memory0().set(arg, ptr / 4);\n  WASM_VECTOR_LEN = arg.length;\n  return ptr;\n}\n\nfunction _assertClass(instance, klass) {\n  if (!(instance instanceof klass)) {\n    throw new Error(\"expected instance of \".concat(klass.name));\n  }\n\n  return instance.ptr;\n}\n/**\n* @param {number} fabric_feature\n* @returns {number}\n*/\n\n\nexport function default_world_feature(fabric_feature) {\n  var ret = wasm.default_world_feature(fabric_feature);\n  return ret;\n}\n/**\n*/\n\nexport const Stage = Object.freeze({\n  Growing: 0,\n  Shaping: 1,\n  Slack: 2,\n  Pretensing: 3,\n  Pretenst: 4\n});\n/**\n*/\n\nexport const SurfaceCharacter = Object.freeze({\n  Frozen: 0,\n  Sticky: 1,\n  Bouncy: 2\n});\n/**\n*/\n\nexport const WorldFeature = Object.freeze({\n  VisualStrain: 0,\n  IterationsPerFrame: 1,\n  Gravity: 2,\n  PretenstFactor: 3,\n  StiffnessFactor: 4,\n  PushOverPull: 5,\n  Drag: 6,\n  ShapingPretenstFactor: 7,\n  ShapingDrag: 8,\n  ShapingStiffnessFactor: 9,\n  Antigravity: 10,\n  IntervalCountdown: 11,\n  PretensingCountdown: 12\n});\n/**\n*/\n\nexport class Fabric {\n  static __wrap(ptr) {\n    const obj = Object.create(Fabric.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  free() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n\n    wasm.__wbg_fabric_free(ptr);\n  }\n  /**\n  * @returns {number}\n  */\n\n\n  get age() {\n    var ret = wasm.__wbg_get_fabric_age(this.ptr);\n\n    return ret >>> 0;\n  }\n  /**\n  * @param {number} arg0\n  */\n\n\n  set age(arg0) {\n    wasm.__wbg_set_fabric_age(this.ptr, arg0);\n  }\n  /**\n  * @param {number} joint_count\n  * @returns {Fabric}\n  */\n\n\n  static new(joint_count) {\n    var ret = wasm.fabric_new(joint_count);\n    return Fabric.__wrap(ret);\n  }\n  /**\n  */\n\n\n  clear() {\n    wasm.fabric_clear(this.ptr);\n  }\n  /**\n  * @returns {Fabric}\n  */\n\n\n  clone() {\n    var ret = wasm.fabric_clone(this.ptr);\n    return Fabric.__wrap(ret);\n  }\n  /**\n  * @returns {number}\n  */\n\n\n  get_joint_count() {\n    var ret = wasm.fabric_get_joint_count(this.ptr);\n    return ret;\n  }\n  /**\n  * @returns {number}\n  */\n\n\n  get_interval_count() {\n    var ret = wasm.fabric_get_interval_count(this.ptr);\n    return ret;\n  }\n  /**\n  * @returns {number}\n  */\n\n\n  get_face_count() {\n    var ret = wasm.fabric_get_face_count(this.ptr);\n    return ret;\n  }\n  /**\n  * @param {number} x\n  * @param {number} y\n  * @param {number} z\n  * @returns {number}\n  */\n\n\n  create_joint(x, y, z) {\n    var ret = wasm.fabric_create_joint(this.ptr, x, y, z);\n    return ret >>> 0;\n  }\n  /**\n  * @param {number} index\n  */\n\n\n  remove_joint(index) {\n    wasm.fabric_remove_joint(this.ptr, index);\n  }\n  /**\n  * @param {number} alpha_index\n  * @param {number} omega_index\n  * @param {boolean} push\n  * @param {number} length_0\n  * @param {number} length_1\n  * @param {number} stiffness\n  * @param {number} attack\n  * @returns {number}\n  */\n\n\n  create_interval(alpha_index, omega_index, push, length_0, length_1, stiffness, attack) {\n    var ret = wasm.fabric_create_interval(this.ptr, alpha_index, omega_index, push, length_0, length_1, stiffness, attack);\n    return ret >>> 0;\n  }\n  /**\n  * @param {number} index\n  */\n\n\n  remove_interval(index) {\n    wasm.fabric_remove_interval(this.ptr, index);\n  }\n  /**\n  * @param {number} joint0\n  * @param {number} joint1\n  * @param {number} joint2\n  * @returns {number}\n  */\n\n\n  create_face(joint0, joint1, joint2) {\n    var ret = wasm.fabric_create_face(this.ptr, joint0, joint1, joint2);\n    return ret >>> 0;\n  }\n  /**\n  * @param {number} index\n  */\n\n\n  remove_face(index) {\n    wasm.fabric_remove_face(this.ptr, index);\n  }\n  /**\n  * @param {number} interval_index\n  * @param {number} attack_countdown\n  * @param {number} decay_countdown\n  * @param {number} delta_size_nuance\n  */\n\n\n  twitch_interval(interval_index, attack_countdown, decay_countdown, delta_size_nuance) {\n    wasm.fabric_twitch_interval(this.ptr, interval_index, attack_countdown, decay_countdown, delta_size_nuance);\n  }\n  /**\n  */\n\n\n  centralize() {\n    wasm.fabric_centralize(this.ptr);\n  }\n  /**\n  * @param {number} altitude\n  */\n\n\n  set_altitude(altitude) {\n    wasm.fabric_set_altitude(this.ptr, altitude);\n  }\n  /**\n  * @param {number} index\n  * @param {number} factor\n  * @param {number} countdown\n  */\n\n\n  multiply_rest_length(index, factor, countdown) {\n    wasm.fabric_multiply_rest_length(this.ptr, index, factor, countdown);\n  }\n  /**\n  * @param {number} index\n  * @param {number} rest_length\n  * @param {number} countdown\n  */\n\n\n  change_rest_length(index, rest_length, countdown) {\n    wasm.fabric_change_rest_length(this.ptr, index, rest_length, countdown);\n  }\n  /**\n  * @param {Float32Array} m\n  */\n\n\n  apply_matrix4(m) {\n    var ptr0 = passArrayF32ToWasm0(m, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    wasm.fabric_apply_matrix4(this.ptr, ptr0, len0);\n  }\n  /**\n  * @param {Float32Array} new_stiffnesses\n  */\n\n\n  copy_stiffnesses(new_stiffnesses) {\n    try {\n      var ptr0 = passArrayF32ToWasm0(new_stiffnesses, wasm.__wbindgen_malloc);\n      var len0 = WASM_VECTOR_LEN;\n      wasm.fabric_copy_stiffnesses(this.ptr, ptr0, len0);\n    } finally {\n      new_stiffnesses.set(getFloat32Memory0().subarray(ptr0 / 4, ptr0 / 4 + len0));\n\n      wasm.__wbindgen_free(ptr0, len0 * 4);\n    }\n  }\n  /**\n  * @param {World} world\n  * @returns {boolean}\n  */\n\n\n  iterate(world) {\n    _assertClass(world, World);\n\n    var ret = wasm.fabric_iterate(this.ptr, world.ptr);\n    return ret !== 0;\n  }\n  /**\n  * @returns {number}\n  */\n\n\n  get_stage() {\n    var ret = wasm.fabric_get_stage(this.ptr);\n    return ret >>> 0;\n  }\n  /**\n  * @param {number} requested_stage\n  * @param {World} world\n  * @returns {number | undefined}\n  */\n\n\n  request_stage(requested_stage, world) {\n    _assertClass(world, World);\n\n    var ret = wasm.fabric_request_stage(this.ptr, requested_stage, world.ptr);\n    return ret === 5 ? undefined : ret;\n  }\n\n}\n/**\n*/\n\nexport class View {\n  static __wrap(ptr) {\n    const obj = Object.create(View.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  free() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n\n    wasm.__wbg_view_free(ptr);\n  }\n  /**\n  * @param {Fabric} fabric\n  * @returns {View}\n  */\n\n\n  static on_fabric(fabric) {\n    _assertClass(fabric, Fabric);\n\n    var ret = wasm.view_on_fabric(fabric.ptr);\n    return View.__wrap(ret);\n  }\n  /**\n  * @param {Fabric} fabric\n  * @param {World} world\n  */\n\n\n  render(fabric, world) {\n    _assertClass(fabric, Fabric);\n\n    _assertClass(world, World);\n\n    wasm.view_render(this.ptr, fabric.ptr, world.ptr);\n  }\n  /**\n  * @returns {number}\n  */\n\n\n  midpoint_x() {\n    var ret = wasm.view_midpoint_x(this.ptr);\n    return ret;\n  }\n  /**\n  * @returns {number}\n  */\n\n\n  midpoint_y() {\n    var ret = wasm.view_midpoint_y(this.ptr);\n    return ret;\n  }\n  /**\n  * @returns {number}\n  */\n\n\n  midpoint_z() {\n    var ret = wasm.view_midpoint_z(this.ptr);\n    return ret;\n  }\n  /**\n  * @returns {number}\n  */\n\n\n  radius() {\n    var ret = wasm.view_radius(this.ptr);\n    return ret;\n  }\n  /**\n  * @param {Float32Array} joint_locations\n  */\n\n\n  copy_joint_locations_to(joint_locations) {\n    try {\n      var ptr0 = passArrayF32ToWasm0(joint_locations, wasm.__wbindgen_malloc);\n      var len0 = WASM_VECTOR_LEN;\n      wasm.view_copy_joint_locations_to(this.ptr, ptr0, len0);\n    } finally {\n      joint_locations.set(getFloat32Memory0().subarray(ptr0 / 4, ptr0 / 4 + len0));\n\n      wasm.__wbindgen_free(ptr0, len0 * 4);\n    }\n  }\n  /**\n  * @param {Float32Array} joint_velocities\n  */\n\n\n  copy_joint_velocities_to(joint_velocities) {\n    try {\n      var ptr0 = passArrayF32ToWasm0(joint_velocities, wasm.__wbindgen_malloc);\n      var len0 = WASM_VECTOR_LEN;\n      wasm.view_copy_joint_velocities_to(this.ptr, ptr0, len0);\n    } finally {\n      joint_velocities.set(getFloat32Memory0().subarray(ptr0 / 4, ptr0 / 4 + len0));\n\n      wasm.__wbindgen_free(ptr0, len0 * 4);\n    }\n  }\n  /**\n  * @param {Float32Array} line_locations\n  */\n\n\n  copy_line_locations_to(line_locations) {\n    try {\n      var ptr0 = passArrayF32ToWasm0(line_locations, wasm.__wbindgen_malloc);\n      var len0 = WASM_VECTOR_LEN;\n      wasm.view_copy_line_locations_to(this.ptr, ptr0, len0);\n    } finally {\n      line_locations.set(getFloat32Memory0().subarray(ptr0 / 4, ptr0 / 4 + len0));\n\n      wasm.__wbindgen_free(ptr0, len0 * 4);\n    }\n  }\n  /**\n  * @param {Float32Array} line_colors\n  */\n\n\n  copy_line_colors_to(line_colors) {\n    try {\n      var ptr0 = passArrayF32ToWasm0(line_colors, wasm.__wbindgen_malloc);\n      var len0 = WASM_VECTOR_LEN;\n      wasm.view_copy_line_colors_to(this.ptr, ptr0, len0);\n    } finally {\n      line_colors.set(getFloat32Memory0().subarray(ptr0 / 4, ptr0 / 4 + len0));\n\n      wasm.__wbindgen_free(ptr0, len0 * 4);\n    }\n  }\n  /**\n  * @param {Float32Array} face_midpoints\n  */\n\n\n  copy_face_midpoints_to(face_midpoints) {\n    try {\n      var ptr0 = passArrayF32ToWasm0(face_midpoints, wasm.__wbindgen_malloc);\n      var len0 = WASM_VECTOR_LEN;\n      wasm.view_copy_face_midpoints_to(this.ptr, ptr0, len0);\n    } finally {\n      face_midpoints.set(getFloat32Memory0().subarray(ptr0 / 4, ptr0 / 4 + len0));\n\n      wasm.__wbindgen_free(ptr0, len0 * 4);\n    }\n  }\n  /**\n  * @param {Float32Array} face_normals\n  */\n\n\n  copy_face_normals_to(face_normals) {\n    try {\n      var ptr0 = passArrayF32ToWasm0(face_normals, wasm.__wbindgen_malloc);\n      var len0 = WASM_VECTOR_LEN;\n      wasm.view_copy_face_normals_to(this.ptr, ptr0, len0);\n    } finally {\n      face_normals.set(getFloat32Memory0().subarray(ptr0 / 4, ptr0 / 4 + len0));\n\n      wasm.__wbindgen_free(ptr0, len0 * 4);\n    }\n  }\n  /**\n  * @param {Float32Array} face_vertex_locations\n  */\n\n\n  copy_face_vertex_locations_to(face_vertex_locations) {\n    try {\n      var ptr0 = passArrayF32ToWasm0(face_vertex_locations, wasm.__wbindgen_malloc);\n      var len0 = WASM_VECTOR_LEN;\n      wasm.view_copy_face_vertex_locations_to(this.ptr, ptr0, len0);\n    } finally {\n      face_vertex_locations.set(getFloat32Memory0().subarray(ptr0 / 4, ptr0 / 4 + len0));\n\n      wasm.__wbindgen_free(ptr0, len0 * 4);\n    }\n  }\n  /**\n  * @param {Float32Array} unit_vectors\n  */\n\n\n  copy_unit_vectors_to(unit_vectors) {\n    try {\n      var ptr0 = passArrayF32ToWasm0(unit_vectors, wasm.__wbindgen_malloc);\n      var len0 = WASM_VECTOR_LEN;\n      wasm.view_copy_unit_vectors_to(this.ptr, ptr0, len0);\n    } finally {\n      unit_vectors.set(getFloat32Memory0().subarray(ptr0 / 4, ptr0 / 4 + len0));\n\n      wasm.__wbindgen_free(ptr0, len0 * 4);\n    }\n  }\n  /**\n  * @param {Float32Array} ideal_lengths\n  */\n\n\n  copy_ideal_lengths_to(ideal_lengths) {\n    try {\n      var ptr0 = passArrayF32ToWasm0(ideal_lengths, wasm.__wbindgen_malloc);\n      var len0 = WASM_VECTOR_LEN;\n      wasm.view_copy_ideal_lengths_to(this.ptr, ptr0, len0);\n    } finally {\n      ideal_lengths.set(getFloat32Memory0().subarray(ptr0 / 4, ptr0 / 4 + len0));\n\n      wasm.__wbindgen_free(ptr0, len0 * 4);\n    }\n  }\n  /**\n  * @param {Float32Array} strains\n  */\n\n\n  copy_strains_to(strains) {\n    try {\n      var ptr0 = passArrayF32ToWasm0(strains, wasm.__wbindgen_malloc);\n      var len0 = WASM_VECTOR_LEN;\n      wasm.view_copy_strains_to(this.ptr, ptr0, len0);\n    } finally {\n      strains.set(getFloat32Memory0().subarray(ptr0 / 4, ptr0 / 4 + len0));\n\n      wasm.__wbindgen_free(ptr0, len0 * 4);\n    }\n  }\n  /**\n  * @param {Float32Array} strain_limits\n  */\n\n\n  copy_strain_limits_to(strain_limits) {\n    try {\n      var ptr0 = passArrayF32ToWasm0(strain_limits, wasm.__wbindgen_malloc);\n      var len0 = WASM_VECTOR_LEN;\n      wasm.view_copy_strain_limits_to(this.ptr, ptr0, len0);\n    } finally {\n      strain_limits.set(getFloat32Memory0().subarray(ptr0 / 4, ptr0 / 4 + len0));\n\n      wasm.__wbindgen_free(ptr0, len0 * 4);\n    }\n  }\n  /**\n  * @param {Float32Array} strain_nuances\n  */\n\n\n  copy_strain_nuances_to(strain_nuances) {\n    try {\n      var ptr0 = passArrayF32ToWasm0(strain_nuances, wasm.__wbindgen_malloc);\n      var len0 = WASM_VECTOR_LEN;\n      wasm.view_copy_strain_nuances_to(this.ptr, ptr0, len0);\n    } finally {\n      strain_nuances.set(getFloat32Memory0().subarray(ptr0 / 4, ptr0 / 4 + len0));\n\n      wasm.__wbindgen_free(ptr0, len0 * 4);\n    }\n  }\n  /**\n  * @param {Float32Array} stiffnesses\n  */\n\n\n  copy_stiffnesses_to(stiffnesses) {\n    try {\n      var ptr0 = passArrayF32ToWasm0(stiffnesses, wasm.__wbindgen_malloc);\n      var len0 = WASM_VECTOR_LEN;\n      wasm.view_copy_stiffnesses_to(this.ptr, ptr0, len0);\n    } finally {\n      stiffnesses.set(getFloat32Memory0().subarray(ptr0 / 4, ptr0 / 4 + len0));\n\n      wasm.__wbindgen_free(ptr0, len0 * 4);\n    }\n  }\n  /**\n  * @param {Float32Array} linear_densities\n  */\n\n\n  copy_linear_densities_to(linear_densities) {\n    try {\n      var ptr0 = passArrayF32ToWasm0(linear_densities, wasm.__wbindgen_malloc);\n      var len0 = WASM_VECTOR_LEN;\n      wasm.view_copy_linear_densities_to(this.ptr, ptr0, len0);\n    } finally {\n      linear_densities.set(getFloat32Memory0().subarray(ptr0 / 4, ptr0 / 4 + len0));\n\n      wasm.__wbindgen_free(ptr0, len0 * 4);\n    }\n  }\n\n}\n/**\n*/\n\nexport class World {\n  static __wrap(ptr) {\n    const obj = Object.create(World.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  free() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n\n    wasm.__wbg_world_free(ptr);\n  }\n  /**\n  * @returns {World}\n  */\n\n\n  static new() {\n    var ret = wasm.world_new();\n    return World.__wrap(ret);\n  }\n  /**\n  * @param {number} surface_character\n  */\n\n\n  set_surface_character(surface_character) {\n    wasm.world_set_surface_character(this.ptr, surface_character);\n  }\n  /**\n  * @param {boolean} push_and_pull\n  */\n\n\n  set_push_and_pull(push_and_pull) {\n    wasm.world_set_push_and_pull(this.ptr, push_and_pull);\n  }\n  /**\n  * @param {number} feature\n  * @returns {number}\n  */\n\n\n  get_float_value(feature) {\n    var ret = wasm.world_get_float_value(this.ptr, feature);\n    return ret;\n  }\n  /**\n  * @param {number} feature\n  * @param {number} value\n  * @returns {number}\n  */\n\n\n  set_float_value(feature, value) {\n    var ret = wasm.world_set_float_value(this.ptr, feature, value);\n    return ret;\n  }\n  /**\n  * @param {number} feature\n  * @param {number} percent\n  * @returns {number}\n  */\n\n\n  set_float_percent(feature, percent) {\n    var ret = wasm.world_set_float_percent(this.ptr, feature, percent);\n    return ret;\n  }\n  /**\n  * @param {Fabric} fabric\n  * @returns {number}\n  */\n\n\n  pretensing_nuance(fabric) {\n    _assertClass(fabric, Fabric);\n\n    var ret = wasm.world_pretensing_nuance(this.ptr, fabric.ptr);\n    return ret;\n  }\n\n}\nexport const __wbindgen_throw = function (arg0, arg1) {\n  throw new Error(getStringFromWasm0(arg0, arg1));\n};"],"sourceRoot":""}